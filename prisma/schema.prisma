generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  username  String   @unique
  password  String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  name         String
  barAge       Float?        @default(0)
  gender       String?       @default("未知")
  postCount    Int?          @default(0)
  ipLocation   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  userId       String        @unique
  portrait     String?
  account      Account?
  comments     Comment[]
  posts        Post[]
  replyFrom    Reply[]       @relation("ReplyFromUser")
  replyTo      Reply[]       @relation("ReplyToUser")
  followedBars FollowedBar[] @relation("FollowedBarUser")
}

model Post {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  title     String
  content   String
  postAt    DateTime
  userId    String
  barId     String
  createdAt DateTime  @default(now())
  updatedAt DateTime?  @updatedAt
  comments  Comment[]
  bar       Bar       @relation(fields: [barId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  userId    String
  postId    String
  commentAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  replies   Reply[]
}

model Reply {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  content    String
  fromUserId String
  toUserId   String
  commentId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt
  comment    Comment  @relation(fields: [commentId], references: [id])
  fromUser   User     @relation("ReplyFromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("ReplyToUser", fields: [toUserId], references: [id])
}

model FollowedBar {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  exp       Int
  level     Int
  barId     String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  bar       Bar      @relation(fields: [barId], references: [id])
  user      User[]   @relation("FollowedBarUser")
}

model Bar {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  name         String        @unique
  followed     Int
  postCount    Int
  barTypeId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?      @updatedAt
  barType      BarType       @relation(fields: [barTypeId], references: [id])
  followedBars FollowedBar[]
  posts        Post[]
}

model BarType {
  id   String @id @default(dbgenerated("gen_random_uuid()"))
  name String @unique
  Bar  Bar[]
}
